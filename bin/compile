#!/bin/bash

APP_DIR="$1"
ENV_DIR="$3"

# load required environment variables
ROOT_DIR=$(<"$ENV_DIR/ROOT_DIR")

if [[ -z $ROOT_DIR ]]; then
    echo "Did you forget to set ROOT_DIR?"
    exit 1
fi

# make sure we're in the root of the app dir
cd "$APP_DIR"

TEMP_DIR="__root__"
mkdir -p $TEMP_DIR

EXTRA_BUILD_DIR=$(mktemp -d /tmp/buildpack.XXXXXXXXX)
# Make sure the directory exists (althought mktemp should create it)
mkdir -p $EXTRA_BUILD_DIR

RELATIVE_PATH_TO_EXTRA_BUILD_DIR=$(realpath --relative-to="${APP_DIR}" "${EXTRA_BUILD_DIR}")

echo "Using the additional build root directory ${EXTRA_BUILD_DIR}"
echo "Relative path with regards to ${APP_DIR} is ${RELATIVE_PATH_TO_EXTRA_BUILD_DIR}"

# copy all the files from current root into the temporary build root
cp -a "${APP_DIR}/." "$EXTRA_BUILD_DIR"

# copy the contents of the specified root into the
# the temp root
cp -a "$ROOT_DIR/." "$TEMP_DIR"

# remove everything besides the new root
shopt -s extglob
rm -rf -- !($TEMP_DIR)

# move everything out of the temp dir into
# the actual root
shopt -s dotglob nullglob
mv ${TEMP_DIR}/* .

# remove the temp dir
rm -r $TEMP_DIR

# Point all the relative paths in the node dependencies and our own build scripts to the new temp-folder
# Our custom build files
find . -type f -maxdepth 3 -name heroku-build.sh |
    grep -v node_modules |
    xargs grep -l 'file:../' |
    xargs perl -p -i -e "s%file:\.\./%${EXTRA_BUILD_DIR}/%s"

# Node dependencies
find . -maxdepth 2 -type f -name package.json -or -name yarn.lock |
    xargs perl -p -i -e "s%file:\.\./%file:${RELATIVE_PATH_TO_EXTRA_BUILD_DIR}/%s"
